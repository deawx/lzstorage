{"version":3,"file":"cstorage.js","sources":["../../src/cstorage.js"],"sourcesContent":["/**\n * JQuery storage extends default storage API to resolve cross-browser issues\n * @author       Sachin Singh\n * @dependencies jQuery 1.11+\n * @date         26/05/2018\n */\nconst messages = {\n    params: 'Insufficient parameters'\n};\n\nconst _hasOwn = Object.prototype.hasOwnProperty;\n\n/**\n * Safety method for console logging\n * @param  {...any} args console arguments\n */\nfunction _log(...args) {\n    if (typeof console !== \"undefined\") {\n        console.log(...args);\n    }\n}\n\n/**\n * Safety method for console logging\n * @param  {...any} args console arguments\n */\nfunction _err(...args) {\n    if (typeof console !== \"undefined\") {\n        console.error(...args);\n    }\n}\n\n/**\n * Check if passed value is a pure object\n * @param {*} key Any type of value which needs to be checked if it's an object\n */\nfunction _isObject(value) {\n    return (!Array.isArray(value) && value !== null && typeof value === 'object');\n}\n\n/**\n * Sets user cookie\n * @param {string} key name of cookie\n * @param {string} value cookie value\n * @param {string} exp cookie expiry\n * @param {string} path url path\n * @param {string} domain supported domain\n */\nfunction setCookie() {\n    if (arguments.length > 1) {\n        const [key, value = '', exp, path = '/', domain = window.location.hostname] = arguments;\n        let updateValue = value;\n        if (value !== null && typeof value === 'object') {\n            updateValue = JSON.stringify(value);\n        }\n        let dt = new Date();\n        // If expiry is specified, then set the correct expiry date\n        if (typeof exp === 'number') {\n            // If exp is Infinity value then set a future date of year 2037 which is the estimated date of singularity\n            if (exp === Infinity) {\n                dt = new Date('Thu, 31 Dec 2037 00:00:00 GMT');\n            } else {\n                // Else reset the time to specified expiry date\n                dt.setTime(dt.getTime() + exp * 24 * 60 * 60 * 1000);\n            }\n        }\n        // Set expiry parameter\n        const expires = exp ? `; expires=${dt.toUTCString()}` : '';\n        // Set cookie path parameter\n        const cookiePath = `; path=${path.trim()}`;\n        let cookieDomain = '';\n        // IE does not allow localhost domains\n        if (['localhost', '127.0.0.1', null].indexOf(domain) === -1) {\n            cookieDomain = `; domain=${domain.trim()}`;\n        }\n        // Mark the cookie as secure if created in secure context\n        let secureCookieFlag = '';\n        if (window.location.protocol === 'https:') {\n            secureCookieFlag = '; secure';\n        }\n        // Set the cookie value\n        document.cookie = `${key}=${updateValue}${expires}${cookieDomain}${cookiePath}${secureCookieFlag}`;\n    } else if (this.config && this.config.debug) {\n        console.log(messages.params);\n    }\n}\n\n/**\n * Gets cookie value\n * @param {string} key name of cookie\n */\nfunction getCookie() {\n    if (arguments.length > 0) {\n        let [key] = arguments;\n        // Decode the cookie value if it is stored in encoded form\n        const cookieString = decodeURIComponent(document.cookie);\n        let allCookies = null;\n        // Split the cookie string to get individual values\n        allCookies = cookieString.split(';');\n        if (allCookies.length) {\n            // Check if any one key value pair matches the key\n            // If yes then return its corresponding value\n            for (let c of allCookies) {\n                c = c.trim(); // Trim the key value pair to remove extra spaces\n                if (c.indexOf(`${key}=`) > -1) {\n                    // Return the value substring\n                    return c.substring(`${key}=`.length, c.length).trim();\n                }\n            }\n        }\n    }\n    return '';\n}\n\n/**\n * Removes a cookie\n * @param {string} key name of cookie\n * @param {string} path url path\n * @param {string} domain supported domain\n */\nfunction removeCookie() {\n    if (arguments.length > 0) {\n        const [key, path = '/', domain = window.location.hostname] = arguments;\n        let cookieDomain = '';\n        let deletedCookieString = '';\n        // IE does not allow localhost domains\n        // Hence check if passed domain is not localhost or null\n        if (['localhost', '127.0.0.1', null].indexOf(domain) === -1) {\n            cookieDomain = `; domain=${domain.trim()}`;\n        }\n        deletedCookieString = `${key}=; expires=Thu, 01 Jan 1970 00:00:00 UTC${cookieDomain}; path=${path}`;\n        document.cookie = deletedCookieString;\n        // Check updated value to get deletion status\n        return !getCookie(key).length;\n    }\n    return false;\n}\n\n/**\n * Resets existing cookie with new expiry\n * @param {string} key name of cookie\n * @param {string} value cookie value\n * @param {string} exp cookie expiry\n * @param {string} path url path\n * @param {string} domain supported domain\n */\nfunction resetCookie(key, value, exp, path, domain) {\n    // Remove the existing cookie\n    removeCookie(key, path, domain);\n    // Set a new cookie with same name\n    setCookie(key, value, exp, path, domain);\n}\n\nconst store = {\n    config: {\n        // To enable or disable console logging\n        debug: false\n    },\n    available() {\n        try {\n            // If localStorage object is missing or setItem does not function properly on localStorage (e.g. Safari incognito)\n            // This methos will throw an error which will tell us if storage API is usable\n            localStorage.setItem('test', 'test');\n            localStorage.removeItem('test');\n            return true;\n        } catch (e) {\n            if (this.config.debug) {\n                _log(\"Storage API is not supported in this environment\");\n            }\n            return false;\n        }\n    },\n    set() {\n        if (arguments.length > 1) {\n            const [key, value, isSession = false] = arguments;\n            let savedValue = value;\n            // Check if value is stringifiable\n            // All values are stores are string in storages\n            if (value !== null && typeof value === 'object') {\n                savedValue = JSON.stringify(value);\n            }\n            // If storage is available, set the value in local or session storage based on flag\n            if (this.available()) {\n                try {\n                    window[isSession ? 'sessionStorage' : 'localStorage'].setItem(key, savedValue);\n                } catch (e) {\n                    if (this.config.debug) {\n                        _err(e);\n                    }\n                }\n            } else {\n                // Else set the value in cookie\n                setCookie(key, savedValue, (isSession ? Infinity : undefined));\n            }\n        } else {\n            if (this.config.debug) {\n                _log(messages.params);\n            }\n        }\n    },\n    remove() {\n        if (arguments.length > 0) {\n            const [key] = arguments;\n            if (this.available()) {\n                try {\n                    // Try to remove the value from both the storages\n                    window.localStorage.removeItem(key);\n                    window.sessionStorage.removeItem(key);\n                    // Try to remove from cookie as well and return the combined result\n                    return !window.localStorage.key(key) || !window.sessionStorage.key(key) || removeCookie(key);\n                } catch (e) {\n                    if (this.config.debug) {\n                        _err(e);\n                    }\n                }\n            }\n            return removeCookie(key);\n        } else {\n            if (this.config.debug) {\n                _log(messages.params);\n            }\n        }\n    },\n    getAll() {\n        if (arguments.length > 0) {\n            const [key, isSession = false] = arguments;\n            const returnValue = [];\n            if (this.available()) {\n                try {\n                    // Specify where to search for value\n                    // session storage is default as it will be searched regardless of flag\n                    const searchIn = ['sessionStorage'];\n                    if (!isSession) {\n                        // If session flag is not set expand the search to local storage\n                        searchIn.push('localStorage');\n                    }\n                    // Search for value in all specified storages and combine the results\n                    searchIn.forEach((type) => {\n                        if (_hasOwn.call(window[type], key)) {\n                            returnValue.push({\n                                value: window[type].getItem(key),\n                                storage: type\n                            });\n                        }\n                    });\n                } catch (e) {\n                    if (this.config.debug) {\n                        _err(e);\n                    }\n                }\n            }\n            // Complete the search by looking up the key in cookie\n            const cookieValue = getCookie(key);\n            if (cookieValue) {\n                returnValue.push({\n                    value: cookieValue,\n                    storage: 'cookie'\n                });\n            }\n            // Return the combined results\n            // Make sure that parsable data is parsed before the actual results are send\n            return returnValue.map(data => {\n                try {\n                    data.value = JSON.parse(data.value);\n                } catch (e) {\n                    if (this.config.debug) {\n                        _log(e);\n                    }\n                }\n                return data;\n            });\n        }\n        return [];\n    },\n    get() {\n        if (arguments.length > 0) {\n            const [key, isSession = false] = arguments;\n            const valueList = this.getAll(key, isSession);\n            // If not value is returned then return undefined\n            if (valueList.length === 0) {\n                return;\n            }\n            // If only one value is returned it means that value was present in only one of the storages\n            // Or the browser supported only one type of storage (probably the cookie store)\n            if (valueList.length === 1) {\n                return valueList[0].value;\n            }\n            // Else the browser does have value stored either is session or local storage which will get preference over cookie\n            // If stored in all three stores, fetch value based on isSession flag\n            if (valueList.length === 3) {\n                return valueList.filter(valueOb => valueOb.storage === (isSession ? 'sessionStorage' : 'localStorage'))[0].value;\n            }\n            // If only two stores are returned, value can be in any two combination of stores:\n            // 1. [localStorage, cookie]\n            // 2. [sessionStorage, cookie]\n            // Get the combination of stores to determine from where the value needs to be fetched\n            const storageTypes = valueList.map(valueOb => valueOb.storage);\n            // If session flag is true check if value was stored in session storage\n            // If not then return the cookie value\n            if (isSession) {\n                if (storageTypes.indexOf('sessionStorage') > -1) {\n                    return valueList.filter(valueOb => valueOb.storage === 'sessionStorage')[0].value;\n                }\n                return valueList.filter(valueOb => valueOb.storage === 'cookie')[0].value;\n            }\n            // If session flag is false, cookie value doesn't matter\n            // Check for session or local storage and return the value\n            return valueList.filter(valueOb => (['sessionStorage', 'localStorage'].indexOf(valueOb.storage) > -1))[0].value;\n        } else {\n            if (this.config.debug) {\n                _log(messages.params);\n            }\n        }\n    },\n    update() {\n        // This method has been revamped to treat different values differently and allow\n        // more control over how we want to update the value with least amount of code\n        // required to be written.\n        // For example if value is a JSON object, you can use a callback and return an object\n        // With the only key which requires updation. Rest the method will take care how\n        // the value is updated\n        // :::::Disclaimer:::::\n        // This method is not ideal for updating cookies as it will modify the expiry value\n        // Use it only if you don't care about cookie expiry date\n        // Also, this method always runs an update even if nothing is changed. Therefore\n        // Use it only if you really want to update something\n        if (arguments.length === 2) {\n            const self = this;\n            // Make sure that both arguments are passed\n            const [key, callback] = arguments;\n            // Get all the values\n            const values = this.getAll(key);\n            // Get the updated value\n            let updatedValue = null;\n            if (typeof callback === 'function') {\n                // It means that the second parameter was passed as a function which can work in number\n                // of ways. It may or may not return a value.\n                // It it returns a value, then directly use that value as an update\n                // Else assume that the data value was modified directly in the stored object\n                updatedValue = callback(...values); // All values are passed a separate parameters\n            } else if (typeof callback !== undefined) {\n                // It means that the updated value was directly passed to the method\n                try {\n                    updatedValue = JSON.parse(callback);\n                } catch (e) {\n                    if (this.config.debug) {\n                        _err(e);\n                    }\n                    updatedValue = callback;\n                }\n            }\n            // Check if we have a valid updated value\n            if (updatedValue !== undefined) {\n                // Check if update value is an object and target key also has an object value\n                // In this scenario we need to update the object instead of replacing it\n                values.forEach((valueOb) => {\n                    const { value } = valueOb;\n                    if (_isObject(value) && _isObject(updatedValue)) {\n                        valueOb.value = {\n                            ...value,\n                            ...updatedValue\n                        };\n                    } else {\n                        valueOb.value = updatedValue;\n                    }\n                });\n            }\n            // Write back all the values to their destinations\n            values.forEach(({ value, storage: store }) => {\n                if (['sessionStorage', 'localStorage'].indexOf(store) > -1) {\n                    self.set(key, value, store === 'sessionStorage');\n                }\n                if (store === 'cookie') {\n                    setCookie(key, value);\n                }\n            });\n        } else {\n            if (this.config.debug) {\n                _log(messages.params);\n            }\n        }\n    }\n};\n\nconst cstorage = {\n    ...store,\n    setCookie,\n    getCookie,\n    removeCookie,\n    resetCookie\n};\n\n// Export store as ES6 default export\nexport default cstorage;"],"names":["messages","params","_hasOwn","Object","prototype","hasOwnProperty","_log","console","log","_err","error","_isObject","value","Array","isArray","setCookie","arguments","length","key","exp","path","domain","window","location","hostname","updateValue","JSON","stringify","dt","Date","Infinity","setTime","getTime","expires","toUTCString","cookiePath","trim","cookieDomain","indexOf","secureCookieFlag","protocol","document","cookie","config","debug","getCookie","cookieString","decodeURIComponent","allCookies","split","c","substring","removeCookie","deletedCookieString","resetCookie","store","available","localStorage","setItem","removeItem","e","set","isSession","savedValue","undefined","remove","sessionStorage","getAll","returnValue","searchIn","push","forEach","type","call","getItem","storage","cookieValue","map","data","parse","get","valueList","filter","valueOb","storageTypes","update","self","callback","values","updatedValue","cstorage"],"mappings":"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"}